#!/usr/bin/env node

var manager = require('..')
	, _ = require('underscore')
	, packageDescriptor = require('../package.json')
	, args = require('yargs')
		.usage('Publish, commit and tag a new version of your meteor package.\n\nUsage: $0 [path] [-p|-d|-a|-l]')
		
		// commands
		.alias('p', 'publish')
		.boolean('p')
		.describe('p', 'Publish a package (the default action)')
		.alias('l', 'link')
		.boolean('l')
		.describe('l', 'Link a package into the packages directory.\nNote this command must be run within the app directory')
		.alias('a', 'app')
		.boolean('a')
		.describe('a', 'Publish linked packages and update versions in .meteor/packages')
		.alias('d', 'dir')
		.boolean('d')
		.describe('d', 'Publish all packages in dir')
		.alias('i', 'increment')
		.boolean('i')
		.describe('i', 'Increment the version number of a package')
		.alias('u', 'update-app')
		.boolean('u')
		.describe('u', 'Update version numbers in app to match versions in /packages dir\nParticularly useful when you\'ve already published each package, but haven\'t updated the app.' )

		// semver increment release options
		.describe('premajor', 'Increment the premajor version')
		.boolean('premajor')
		.describe('preminor', 'Increment the preminor version')
		.boolean('preminor')
		.describe('prepatch', 'Increment the prepatch version')
		.boolean('prepatch')
		.describe('prerelease', 'Increment the prerelease version')
		.boolean('prerelease')
		.describe('major', 'Increment the major version')
		.boolean('major')
		.describe('minor', 'Increment the minor version')
		.boolean('minor')
		.describe('patch', 'Increment the patch version')
		.boolean('patch')
		.describe('pre', 'Increment the pre version')
		.boolean('pre')

		// publish options
		.describe('commit', 'Commit changes after publishing package')
		.boolean('commit')
		.default('commit', true)
		.describe('tag', 'Tag commit after publishing package')
		.boolean('tag')
		.default('tag', true)
		.describe('push', 'Push changes after publishing package')
		.boolean('push')
		.default('push', true)
		.describe('bump', 'Increment patch version after publishing package')
		.boolean('bump')
		.default('bump', true)

		// app options
		.describe('cleanup', 'Remove symlinked packages after running --app')
		.boolean('cleanup')

		// final
		.check(function (args) {
			if (args.tag && !args.commit) {
				console.log('Warning --tag option is a no-op without --commit option');
			}

			if (args.push && !args.commit) {
				console.log('Warning --push option is a no-op without --commit option');
			}

			if (_.filter([args.link, args.publish, args.app, args.dir, args.increment], _.identity).length > 1) {
				throw new Error('Please specify only one of -l, -a, -p, -d, -i');
			}
		})
		.strict()
		.help('help')
		.version(packageDescriptor.version, 'version')
		.argv
	, path = args._[0] || '.'
	;

var promise;

if (args.link) {
	promise = manager.linkPackages(args._, args);
} else if (args.publish) {
	promise = manager.publish(path, args);
} else if (args.app) {
	promise = manager.publishApp(path, args);
} else if (args.dir) {
	promise = manager.publishDir(path, args);
} else if (args.increment) {
	promise = manager.increment(path, args);
} else if (args.updateApp) {
	// Note that if this option is specified with the -a option
	promise = manager.updateApp(path, args);
} else {
	promise = manager.publishAnything(path, args);
}

//throw any errors
promise.done();

// manager[command](path, argv);